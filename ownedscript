--[[ 
 Obfuscated with logic intact.
 Original prints and sieve of Eratosthenes preserved.
]]--

local c = string.char
local b = string.byte
local s = string.sub
local bit = bit32 or bit
local bxor = bit.bxor
local concat = table.concat
local insert = table.insert

local function xorStr(str, key)
    local res = {}
    local keyLen = #key
    for i = 1, #str do
        local charA = b(s(str, i, i))
        -- wrap key indexing safely
        local keyIndex = 1 + ((i - 1) % keyLen)
        local keyChar1 = b(s(key, keyIndex, keyIndex))
        local keyChar2 = b(s(key, (keyIndex % keyLen) + 1, (keyIndex % keyLen) + 1))
        insert(res, c(bxor(charA, (keyChar1 + keyChar2) % 256)))
    end
    return concat(res)
end

-- Just some number variables (not really used)
local v8 = 3961 + 12203 + (((6864 - 3000) + 364101) - (172043 + 102353)) - (68391 - (368 + 423)) + ((192482 - (568 + 962)) - (331969 - 221331))
v8 = v8 + ((251 - 138) - ((99 - 73) + (509 - (416 + 26)))) + ((261 + 958) - (52 + 67 + 997))
local v9 = 1205410 - (508 + 1446)
local v10 = 895647 + 334824
local v11 = 8023919 - (145 + 293)

if v10 > v9 then
    print(xorStr("\197\209\206\32", "\126\177\163\187\69\134\219\167"))
end
if (1 + v11) > v10 then
    print(xorStr("\44\207\44\208\239\32\204\62\192\188\55\197\47\133\255\44\195\46\204\232\42\194\36\214\189", "\156\67\173\74\165"))
end

print(xorStr("\23\187\64\21\183\47\72\51\247\114\37\168\52\79\58\176\90\43\252\49\79\56\187\9\21\179\43\86\56\178\93\19\176\63\6\60\190\77\19\252\50\78\61\164\9\5\168\52\79\58\176\8", "\38\84\215\41\118\220\70"))

local function sieve_of_eratosthenes(n)
    local primes = {}
    for i = 2, n do primes[i] = true end
    for i = 2, math.floor(math.sqrt(n)) do
        if primes[i] then
            for j = i * i, n, i do
                primes[j] = false
            end
        end
    end
    return primes
end

local primes = sieve_of_eratosthenes(420)

for i, isPrime in pairs(primes) do
    if isPrime then
        print(xorStr("\96\4\43\31\251\16\16\45\7\240\84\76\98", "\158\48\118\66\114") .. i)
    end
end

print(xorStr("\131\43\7\118\103\170\187\164\38\22\35\96\166\250\191\33\80\52\118\182\239\244", "\155\203\68\112\86\19\197"))
